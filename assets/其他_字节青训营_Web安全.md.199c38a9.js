import{_ as l,c as i,o as e,d as o}from"./app.e94b66cf.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"攻击篇:","slug":"攻击篇","link":"#攻击篇","children":[]},{"level":3,"title":"防御篇:","slug":"防御篇","link":"#防御篇","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"其他/字节青训营/Web安全.md"}'),t={name:"其他/字节青训营/Web安全.md"},r=o('<h3 id="攻击篇" tabindex="-1">攻击篇: <a class="header-anchor" href="#攻击篇" aria-hidden="true">#</a></h3><ol><li><p>Cross-Site Scripting(XSS)</p><ul><li>跨站脚本攻击,攻击者通过一些方式将自己的恶意代码注入到网页中,用户点击网页就会执行恶意代码</li><li>因为开发者盲目信任用户提交的内容并且将用户提交的字符串转化成了DOM</li><li>XSS特点: <ul><li>通常难以从 UI 上感知（暗地执行脚本）</li><li>窃取用户信息（cookie/token）</li><li>绘制 UI(例如弹窗),诱骗用户点击/填写表单</li></ul></li><li>XSS攻击类型: <ol><li>存储型 Stored XSS <ul><li>恶意脚本被存在数据库中</li><li>访问页面,然后可以读,写用户数据</li><li>危害最大,对全部用户可见</li></ul></li><li>反射型 Refleted XSS <ul><li>不涉及数据库,主要是从URL上攻击</li></ul></li><li>基于DOM DOM-based XSS <ul><li>不需要服务器的参与</li><li>恶意攻击的发起 + 执行,全部在浏览器完成</li></ul></li><li>Mutation-based XSS <ul><li>利用了浏览器渲染 DOM 的特性(独特优化)</li><li>不同浏览器,会有区别(按浏览器进行攻击)</li></ul></li></ol></li></ul></li><li><p>Cross-Site request forgery(CSRF) 跨站伪造请求</p><ul><li>在用户不知情的前提下</li><li>利用用户权限（cookie）</li><li>构造指定的 HTTP 请求,窃取或修改用户敏感信息</li></ul></li><li><p>Injection 注入</p><ul><li>SQL injection:</li></ul><p>向服务器发送HTTP请求带有SQL参数,服务器会拼接SQL代码来执行,然后就可以修改或者删除数据,或者获取数据</p><ul><li>CLI</li><li>OS command</li><li>Server-Side Request Forgery(SSRF):服务端伪造请求,SSRF不是Injection,但和Injection原理类似</li></ul></li><li><p>Denial of Service(Dos):<br> 通过某种形式,导致服务器资源被显著消耗,来不及相应更多请求,最后请求越压越多,服务器崩溃</p><ul><li>ReDos:基于正则表达式的拒绝服务攻击,基于正则表达式的贪婪匹配算法进行攻击</li><li>Distributed DoS(DDoS):短时间内有大量僵尸设备的请求,导致服务器不能即使完成全部请求,例如利用TCP进行请求最后请求越压越多,服务器崩溃<br> 攻击特点: <ul><li>直接访问 IP</li><li>任意 API</li><li>消耗大量带宽(耗尽)</li></ul></li></ul></li><li><p>中间人攻击,利用局域网的一些协议机制</p><ol><li>明文传输</li><li>信息篡改不可知</li><li>对方身份未验证</li></ol></li></ol><h3 id="防御篇" tabindex="-1">防御篇: <a class="header-anchor" href="#防御篇" aria-hidden="true">#</a></h3><ol><li>XSS <ul><li>永远不要信任用户的提交内容</li><li>不用将用户提交的内容之间转换成DOM</li><li>现成工具: <ul><li>前端 <ul><li>主流框架防御 XSS</li><li>google-closure-library</li></ul></li><li>服务端（Node） <ul><li>DOMPurify</li></ul></li></ul></li><li>一些注意: <ol><li>若要进行将string转DOM时要使用转义</li><li>要上传 svg 文件时,进行一次扫描</li><li>尽量不要做让用户自定义跳转的行为</li><li>要留意可以自定义样式的东西</li></ol></li></ul></li><li>Content Security Pollicy(CSP) <ul><li>允许开发者定义哪些源(域名)被认为是安全的</li><li>来自安全源的脚本可以执行,否则直接抛错</li><li>拒绝eval + inline script</li></ul></li><li>CSRF的防御 <ul><li>判断是否是合法来源</li><li>通过限制请求来源</li><li>可以校验 Origin 和 Referer</li><li>判断合法来源的方式: <ol><li>if(请求来自合法页面)</li><li>then(服务器接收过页面请求)</li><li>then(服务器可以标识)</li></ol></li><li>通过传递给用户 token 然后用户下次使用 token + 用户信息 就可以了</li><li>尽量将 GET 和 POST 的请求单独操作,不要合并操作</li></ul></li><li>Samesite cookie<br> cookie 有 Samesite 属性,加上 Samesite 后,会限制第三方网站,可以用来防御 CSRF 攻击,还有用户追踪</li><li>Injection防御 <ol><li>找到查询SQL的地方,使用 prepared statement 可以让代码提前编译,让SQL注入语句不能执行</li><li>对于其他的注入可以使用: <ol><li>最小权限原则</li><li>建立允许名单 + 过滤</li><li>对 URL 类型参数进行协议,域名,ip等限制</li></ol></li></ol></li><li>Regex Dos防御 <ol><li>避免使用 正则表达式的贪婪模式</li><li>代码扫描 + 正则测试性能</li><li>拒绝使用用户提供的正则</li><li>使用 负载均衡,AP网关,CDN等进行过滤</li><li>快速自动扩容,非核心服务降级等方式进行扛量</li></ol></li><li>防御中间人攻击 <ul><li>使用HTTPS协议,HTTPS具有可靠性(加密),完整性(MAC验证),不可抵赖性(数字签名)</li></ul></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h3><ul><li>安全无小事</li><li>使用的依赖(npm package,甚至是Node.js),可能成为最薄弱的一环 <ul><li>[left-pad事件]</li><li>[eslint-scope事件]</li><li>[event-stream事件]</li></ul></li><li>保持学习的心态.</li></ul>',6),a=[r];function n(u,s,S,c,d,p){return e(),i("div",null,a)}const D=l(t,[["render",n]]);export{h as __pageData,D as default};
