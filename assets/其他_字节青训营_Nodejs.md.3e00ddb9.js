import{_ as e,c as l,o as i,d as a}from"./app.e94b66cf.js";const p=JSON.parse('{"title":"NodeJs","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node.js运行时的结构","slug":"node-js运行时的结构","link":"#node-js运行时的结构","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]}]}],"relativePath":"其他/字节青训营/Nodejs.md"}'),t={name:"其他/字节青训营/Nodejs.md"},o=a('<h1 id="nodejs" tabindex="-1">NodeJs <a class="header-anchor" href="#nodejs" aria-hidden="true">#</a></h1><blockquote><p>课件链接： <a href="https://bytedance.feishu.cn/file/boxcnhajaIHVf72ioqswDDbCokc" target="_blank" rel="noreferrer">https://bytedance.feishu.cn/file/boxcnhajaIHVf72ioqswDDbCokc</a></p></blockquote><h2 id="node-js运行时的结构" tabindex="-1">Node.js运行时的结构 <a class="header-anchor" href="#node-js运行时的结构" aria-hidden="true">#</a></h2><ul><li>v8：JavaScript Runtime，诊断调试工具</li><li>libuv：eventlop（事件循环），syscall（系统调用）</li></ul><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h3><ul><li>异步I/O</li><li>单线程 <ul><li>JS单线程 <ul><li>实际：JS线程+uv线程池+V8任务线程池+V8 Inspector线程</li></ul></li><li>优点：不用考虑多线程状态同步问题,也就不需要锁;同时还能比较高效地利用系统资源</li><li>缺点：阻塞会产生更多负面影响 <ul><li>解决办法：多进程或多线程</li></ul></li></ul></li><li>跨平台 <ul><li>Node.js跨平台+JS无需编译环境(+Web跨平台+诊断工具跨平台）</li><li>开发成本低(大部分场景无需担心跨平台问题)，整体学习成本低</li></ul></li></ul>',6),s=[o];function n(d,r,c,h,u,_){return i(),l("div",null,s)}const b=e(t,[["render",n]]);export{p as __pageData,b as default};
